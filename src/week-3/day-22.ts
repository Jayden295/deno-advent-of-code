import { OpenFileLineByLineAsArray } from "../helper.ts";

function parseSecrets(lines: string[]): number[] {
  const secrets: number[] = [];

  for (let i = 0; i < lines.length; i++) {
    const trimmed_line = lines[i].trim();

    if (trimmed_line !== "") {
      secrets.push(parseInt(trimmed_line));
      if (isNaN(secrets[secrets.length - 1]))
        throw new Error(
          `Unable to transform current line ${i + 1} into a number`,
        );
    }
  }

  return secrets;
}

// Evolve a number a specific amount of steps
function evolve(original: number, n: number) {
  let new_secret = original;
  for (let i = 0; i < n; i++) {
    new_secret = stepThree(stepTwo(stepOne(new_secret)));
  }
  return new_secret;
}

function stepOne(secret_number: number) {
  let new_secret: number = secret_number * 64;
  new_secret = mix(new_secret, secret_number);
  return prune(new_secret);
}

function stepTwo(secret_number: number) {
  let new_secret = Math.floor(secret_number / 32);
  new_secret = mix(new_secret, secret_number);
  return prune(new_secret);
}

function stepThree(secret_number: number) {
  let new_secret: number = secret_number * 2048;
  new_secret = mix(new_secret, secret_number);
  return prune(new_secret);
}

function mix(value: number, secret_number: number) {
  return (value ^ secret_number) >>> 0;
}

function prune(secret_number: number) {
  return secret_number % 16777216;
}

// Solve part one by looping over secrets and making them "evolve"
function partOne(secrets: number[], evolve_amount: number): number {
  let sum: number = 0;

  for (const secret of secrets) {
    sum += evolve(secret, evolve_amount);
  }

  return sum;
}

async function main() {
  const filename = Deno.args[0];
  if (filename === undefined) {
    console.log("Usage: day-22.ts [filename]");
    throw new Error("Expected filename as first argument");
  }

  const lines = await OpenFileLineByLineAsArray(filename);
  const secrets = parseSecrets(lines);

  const sum = partOne(secrets, 2000);

  console.log(`sum of 2000th secret number generated by each buyer: ${sum}`);
}

main();
